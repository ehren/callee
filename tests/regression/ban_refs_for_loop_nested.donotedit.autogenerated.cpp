
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"
//#include "ceto_private_boundscheck.donotedit.autogenerated.h"

#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
    template <typename T1, typename T2>
auto bar(const T1& x, const T2& y) -> void {
        ; // pass
    }

struct Foo : public ceto::shared_object, public std::enable_shared_from_this<Foo> {

    decltype(std::vector {{1, 2, 3}}) a = std::vector {{1, 2, 3}};

    decltype(std::vector {{4, 5, 6}}) b = std::vector {{4, 5, 6}};

        inline auto blah() -> void {
            ; // pass
        }

        inline auto foo() -> void {
            for(const auto& x : (this -> a)) {
                bar(x, x);
                for(const auto& y : (this -> b)) {
                    bar(x, y);
                }
            }
        }

};

    auto main() -> int {
        auto f { std::make_shared<Foo>() } ;
        (*ceto::mad(f)).foo();
    }

