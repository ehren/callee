
#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>


#include "ceto.h"
//#include "ceto_private_boundscheck.donotedit.autogenerated.h"

#include "ceto_private_listcomp.donotedit.autogenerated.h"
;
#include "ceto_private_boundscheck.donotedit.autogenerated.h"
;
#include "ceto_private_convenience.donotedit.autogenerated.h"
;
struct Bar : public ceto::object {

    int x { 1 } ; static_assert(std::is_convertible_v<decltype(1), decltype(x)>);

        inline auto bar() const -> void {
            std::cout << [&]() -> decltype(auto) {
                    static_assert(!(std :: is_reference_v<decltype(([&]() {
                            return (this -> x);
                            }()))>));
                    return [&]() {
                            return (this -> x);
                            }();
                    }();
        }

};

    auto main() -> int {
        (*ceto::mad([&]() -> decltype(auto) {
                static_assert(!(std :: is_reference_v<decltype((Bar()))>));
                return Bar();
                }())).bar();
    }

