include <iostream>

unsafe()

cpp'
#define CETO_UNSAFE_ARRAY_ACCESS(array, index) (array[index])
'

# Herb Sutter - ACCU 2024 - Keynote: Safety, Security, Safety and C / C++ - C++ Evolution
# https://youtu.be/EB7yR-1317k?t=3373
# "If you see an expression of the form a[b] and std::ssize is available,
# including for C-arrays and vector and span and all those things,
# just insert a 0 <= b < std::ssize(a) at the call site"

defmacro (array[index], array, index:
    if (array.name() == "lambda":
        # not actually an array access (general syntax ftl)
        return None
    )
    return quote(ceto.bounds_check(unquote(array), unquote(index)))
)

defmacro (array.unsafe[index], array, index:
    return quote(CETO_UNSAFE_ARRAY_ACCESS(unquote(array), unquote(index)))
)

namespace (ceto)

# Herb Sutter - ACCU Keynote
# See slide at above URL:
# "Inserting call-site bounds checks for a[b] if std::size(a) is available"
if (defined(CETO_HAS_SOURCE_LOCATION):
    def (bounds_check, arr: mut:auto:ref:ref, index: size_t, loc: const:std.source_location:ref = std.source_location.current():
        if (index >= std.size(arr):
            std.cerr << "terminating on out of bounds access: " << loc.file_name() << ":"
            std.cerr << loc.function_name() << ":" << loc.line() << ":" << loc.column() << "\n"
            std.terminate()
        )

        return std.forward<decltype(arr)>(arr).unsafe[std.forward<decltype(index)>(index)]
    ) : decltype(auto):requires:requires(std.size(arr))
else:
    def (bounds_check, arr: mut:auto:ref:ref, index: size_t:
        if (index >= std.size(arr):
            std.cerr << "terminating on out of bounds access\n"
            std.terminate()
        )

        return std.forward<decltype(arr)>(arr).unsafe[std.forward<decltype(index)>(index)]
    ) : decltype(auto):requires:requires(std.size(arr))
) : preprocessor

# Peering Forward - C++â€™s Next Decade - Herb Sutter - CppCon 2024
# https://www.youtube.com/watch?v=FNi1-x4pojs&t=5271s
# "For every a[b] where a is a contiguous container (incl. std::size(a)) and b is integral...
#  Inject a call-site bounds check for 0 < b && b < std::size(a)"

# Non-integral 'index' - not a contiguous container
def (bounds_check, non_array: mut:auto:ref:ref, obj: mut:auto:ref:ref:
    return std.forward<decltype(non_array)>(non_array).unsafe[std.forward<decltype(obj)>(obj)]
) : decltype(auto):requires:not std.is_integral_v<std.remove_cvref_t<decltype(obj)>>

# We'll allow an integral index for std.map/std.unordered_map ish types only

# from https://stackoverflow.com/questions/69785562/c-map-and-unordered-map-template-parameter-check-for-common-behavior-using-c/69869007#69869007
is_map_type: template<class:T>:concept = std.same_as<typename:T.value_type, std.pair<const:typename:T.key_type, typename:T.mapped_type>>

def (bounds_check, map_like: mut:auto:ref:ref, key: mut:auto:ref:ref:
    return std.forward<decltype(map_like)>(map_like).unsafe[std.forward<decltype(key)>(key)]
) : decltype(auto):requires:std.is_integral_v<std.remove_cvref_t<decltype(key)>> and is_map_type<std.remove_cvref_t<decltype(map_like)>>
