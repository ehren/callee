# Available at setup time due to pyproject.toml
from pybind11.setup_helpers import Pybind11Extension, build_ext
from setuptools import setup, find_packages
from glob import glob
import os
import sys
import shutil

__version__ = "0.1.2"

# The main interface is through Pybind11Extension.
# * You can add cxx_std=11/14/17, and then build_ext can be removed.
# * You can set include_pybind11=false to add the include directory yourself,
#   say from a submodule.
#
# Note:
#   Sort input source files if you glob sources to ensure bit-for-bit
#   reproducible builds (https://github.com/pybind/python_example/pull/53)

rootdir = os.path.dirname(__file__)
manifest = os.path.join(rootdir, "MANIFEST.in")
packaged_ceto_header = os.path.join(rootdir, "ceto", "ceto.h")
packaged_ceto_ast_header = os.path.join(rootdir, "ceto", "ast.cth")
packaged_ceto_utility_header = os.path.join(rootdir, "ceto", "utility.cth")
packaged_ceto_visitor_header = os.path.join(rootdir, "ceto", "visitor.cth")

extra_packaged = [manifest, packaged_ceto_header, packaged_ceto_ast_header, packaged_ceto_utility_header, packaged_ceto_visitor_header]

for f in extra_packaged:
    if os.path.isfile(f):
        raise RuntimeError("to be packaged on-the-fly generated file unexpectedly exists", f)

try:

    with open(manifest, "w") as f:
        f.write("""
    include ceto/*.cth
    include ceto/*.h
    """)

    shutil.copyfile(os.path.join(rootdir, "include", "ceto.h"), packaged_ceto_header)
    shutil.copyfile(os.path.join(rootdir, "selfhost", "ast.cth"), packaged_ceto_ast_header)
    shutil.copyfile(os.path.join(rootdir, "selfhost", "utility.cth"), packaged_ceto_utility_header)
    shutil.copyfile(os.path.join(rootdir, "selfhost", "visitor.cth"), packaged_ceto_visitor_header)

    if sys.platform == "win32":
        _extra_compile_args = ["/Zc:__cplusplus", "/Wall", "/permissive-"]
        _extra_link_args = []
    else:
        _extra_link_args = ["-Wl,-ldl"]
        _extra_compile_args = [] #["-O0", "-g3"]

    ext_modules = [
        Pybind11Extension("ceto._abstractsyntaxtree",
            ["selfhost/ast.donotedit.autogenerated.cpp"],
            #define_macros = [('VERSION_INFO', __version__)],
            cxx_std=20,
            include_dirs=["include", "selfhost/thirdparty"],
            extra_compile_args=_extra_compile_args,
            extra_link_args=_extra_link_args
        ),
    ]

    setup(
        name="ceto",
        packages = ["ceto"],
        entry_points = {
            'console_scripts': ['ceto=ceto.compiler:main'],
        },
        version=__version__,
        author="Ehren Metcalfe",
        author_email="ehren.m@gmail.com",
        url="https://github.com/ehren/ceto",
        description="General purpose programming language transpiled to C++",
        long_description="Parens/call expression language transpiled to c++20. \"Python\" with 2 parentheses moved or inserted (with extra C++ syntax). Codegen based on https://github.com/lukasmartinelli/py14 with additions e.g. implicit make_shared/unique, checked autoderef via '.', swiftish lambda capture, implicit move from last use of unique, const by default, extra CTAD!",
        ext_modules=ext_modules,
        include_package_data=True,
        extras_require={"test": "pytest"},
        install_requires=[
            'cpyparsing',  # pyparsing also supported
        ],
        #cmdclass={"build_ext": build_ext},
        zip_safe=False,
        python_requires=">=3.8",
    )

finally:

    for f in extra_packaged:
        os.remove(f)
