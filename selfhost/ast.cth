# vim: syntax=python

include <map>
include <typeinfo>
include <numeric>
include <pybind11/pybind11.h>
include <pybind11/stl.h>
include <pybind11/stl_bind.h>

py: namespace = pybind11


def (join, v, to_string, sep="":
    if (v.empty():
        return ""
    )
    return std.accumulate(v.cbegin() + 1, v.cend(), to_string(v[0]),
        lambda[&to_string, &sep] (a, el, a + sep + to_string(el)))
)


class (Node:
    func: Node
    args: [Node]
    source: (std.string, int)

    def (init, func, args, source = ("", 0):
        self.func = func
        self.args = args
        self.source = source
    )

    declared_type: Node = None
    scope: py.object = py.none()
    _parent: Node:weak = {}
    from_include = false

    def (repr: virtual:
        #classname : std.string = typeid(*this).name()
        selph : py.object = py.cast(this)
        classname = std.string(py.str(selph.attr(c"__class__").attr(c"__name__")))
        csv = join(self.args, lambda(a, a.repr()), ", ")
        return classname + "(" + self.func.repr() + ")([" + csv + "])"
    ) : std.string

    def (name: virtual:
        return std.nullopt
    ) : std.optional<std.string>

    def (parent: virtual:
        return self._parent.lock()
    ) : Node

    def (set_parent: virtual:mut, p: Node:
        self._parent = p
    )
)

class (UnOp(Node):
    op : std.string

    def (init, op, args:[Node], source = ("", 0):
        self.op = op
        super.init(None, args, source)
    )

    def (repr:
        return "(" +  self.op + " " + self.args[0].repr() + ")"
    ) : std.string
)

class (LeftAssociativeUnOp(Node):
    op : std.string

    def (init, op, args:[Node], source = ("", 0):
        self.op = op
        super.init(None, args, source)
    )

    def (repr:
        return "(" + self.args[0].repr() + " " + self.op + ")"
    ) : std.string
)

class (BinOp(Node):
    op : std.string

    def (init, op, args:[Node], source = ("", 0):
        self.op = op
        super.init(None, args, source)
    )

    def (lhs:
        return self.args[0]
    )

    def (rhs:
        return self.args[1]
    )

    def (repr:
        return "(" + self.lhs().repr() + " " + self.op + " " + self.rhs().repr() + ")"
    ) : std.string
)

class (TypeOp(BinOp):
    pass
)

class (SyntaxTypeOp(TypeOp):
    synthetic_lambda_return_lambda : Node = None
)

class (AttributeAccess(BinOp):

    def (repr:
        return self.lhs().repr() + "." + self.rhs().repr()
    ) : std.string
)

class (ArrowOp(BinOp):
    pass
)

class (ScopeResolution(BinOp):
    pass
)

class (Assign(BinOp):
    pass
)

class (NamedParameter(Assign):
    def (repr:
        return "NamedParameter(" + join(self.args, lambda(a, a.repr()), ", ")  + ")"
    ) : std.string
)

class (Identifier(Node):
    _name : string

    def (init, name, source = ("", 0):
        self._name = name
        super.init(None, [] : Node, source)
    )

    def (repr:
        return self._name
    ) : std.string

    def (name:
        return self._name
    ) : std.optional<std.string>
)

class (Call(Node):
    is_one_liner_if = false

    def (repr:
        csv = join(self.args, lambda (a, a.repr()), ", ")
        return self.func.repr() + "(" + csv + ")"
    ) : std.string
)

class (ArrayAccess(Node):
    def (repr:
        csv = join(self.args, lambda (a, a.repr()), ", ")
        return self.func.repr() + "[" + csv + "]"
    ) : std.string
)

class (BracedCall(Node):
    def (repr:
        csv = join(self.args, lambda (a, a.repr()), ", ")
        return self.func.repr() + "{" + csv + "}"
    ) : std.string
)

class (Template(Node):
    def (repr:
        csv = join(self.args, lambda (a, a.repr()), ", ")
        return self.func.repr() + "<" + csv + ">"
    ) : std.string
)


# User Ingmar
# https://stackoverflow.com/questions/2896600/how-to-replace-all-occurrences-of-a-character-in-string/29752943#29752943
def (string_replace, source: string, from: string, to: string:
    new_string : mut = std.string()
    new_string.reserve(source.length())  # avoids a few memory allocations

    last_pos : mut:std.string.size_type = 0  # TODO just string.size_type should also generate std::string::size_type
    find_pos : mut:std.string.size_type = 0

    while (std.string.npos != (find_pos = source.find(from, last_pos)):
        new_string.append(source, last_pos, find_pos - last_pos)
        new_string += to
        last_pos = find_pos + from.length()
    )

    new_string.append(source, last_pos, source.length() - last_pos)  # better than new_string += source.substr(last_pos) to avoid creating temporary string [as substr() does]. â€“ tav

    return new_string  # clang and g++ -O3 produce less code returning by value than taking source by mut:ref as in answer url
)

def (get_string_replace_function:
    func : mut:static:std.function<std.string(std.string)> = {}
    return func
)

def (set_string_replace_function, f: decltype(get_string_replace_function()):
    get_string_replace_function() = f
)

class (StringLiteral(Node):
    str : string
    prefix : Identifier
    suffix : Identifier

    def (init, str, prefix: Identifier = None, suffix: Identifier = None, source = ("", 0):
        self.str = str
        self.prefix = prefix
        self.suffix = suffix
        super.init(None, [] : Node, source)
    )

    def (escaped:
        # broken
        s : mut = string_replace(self.str, "\\", "\\\\")  # replace \ with \\ escape sequence
        s = string_replace(s, "\n", "\\n")                # now "fixed"
#        s = string_replace(s, "\n", "\\" + "n")          # cheating workaround no longer necessary
        s = string_replace(s, '"', '\\"')                 # replace actual " with \" escape sequence.
        s = '"' + s + '"'
        return s

         # this is still very broken
#        cpp'
#            std::string s = string_replace(this->str, "\\", "\\\\");
#            s = string_replace(s, "\n", "\\n");
#            s = string_replace(s, "\"", "\\"");
#        '

        # TODO make this a testcase
#        replacer = get_string_replace_function()
#        return replacer(std.string)

    )

    def (repr:
        return if (self.prefix:
            self.prefix.name().value()
        else:
            ""
        ) + self.escaped() + if (self.suffix:
            self.suffix.name().value()
        else:
            ""
        )
    ) : string
)

class (IntegerLiteral(Node):
    integer_string : std.string
    suffix : Identifier

    def (init, integer_string, suffix: Identifier = None, source = ("", 0):
        self.integer_string = integer_string
        self.suffix = suffix
        super.init(None, {}, source)
    )

    def (repr:
        return self.integer_string + if (self.suffix: self.suffix.name().value() else: "")
    ) : std.string
)

class (FloatLiteral(Node):
    float_string : std.string
    suffix : Identifier

    def (init, float_string, suffix : Identifier, source = ("", 0):
        self.float_string = float_string
        self.suffix = suffix
        super.init(None, {}, source)
    )

    def (repr:
        return self.float_string + if (self.suffix: self.suffix.name().value() else: "")
    ) : std.string
)

class (ListLike_(Node):
    def (init, args: [Node], source = ("", 0):
        super.init(None, args, source)
    )

    def (repr:
#        classname = std.string(typeid(*this).name())
        selph : py.object = py.cast(this)
        classname = std.string(py.str(selph.attr(c"__class__").attr(c"__name__")))
        return classname + "(" + join(self.args, lambda (a, a.repr()), ", ") + ")"
    ) : std.string
)

class (ListLiteral(ListLike_):
    pass
)

class (TupleLiteral(ListLike_):
    pass
)

class (BracedLiteral(ListLike_):
    pass
)

class (Block(ListLike_):
    pass
)

class (Module(Block):
    has_main_function = false
)

class (RedundantParens(Node):
    def (init, args: [Node], source = ("", 0):
        super.init(None, args, source)
    )

    def (repr:
#        classname = std.string(typeid(*this).name())
        selph : py.object = py.cast(this)
        classname = std.string(py.str(selph.attr(c"__class__").attr(c"__name__")))
        return classname + "(" + join(self.args, lambda (a, a.repr()), ", ") + ")"
    ) : std.string
)

class (InfixWrapper_(Node):
    def (init, args: [Node], source = ("", 0):
        super.init(None, args, source)
    )

    def (repr:
#        classname = std.string(typeid(*this).name())
        selph : py.object = py.cast(this)
        classname = std.string(py.str(selph.attr(c"__class__").attr(c"__name__")))
        return classname + "(" + join(self.args, lambda (a, a.repr()), ", ") + ")"
    ) : std.string
)


#no:
#defmacro (wild(x) : std.Function = lambda(wild(b)), x, b:
#)
# this might work:
#defmacro (x: std.function = lambda(b), x: Identifier, b:  # b is generic so instance of WildCard. x is a WildCard with stored_type == Integer
#    # should allow either/mix of these
#    return Assign([TypeOp([x, Call(Identifier("decltype"), [b.parent])]), b.parent])
#    return quote(unquote(x) : std.function(decltype(lambda(unquote(b)))) = lambda(unquote(b)))
#)
#
# 'pattern' is unnecessary:
#defmacro (pattern(x: std.function, t) = pattern(lambda(b), l), x: Identifier, b: Node:
#defmacro (x: std.function = pattern(lambda(Wild(b)), l), x: Identifier, l: Call:
#    return quote(unquote(
#)
#

#defmacro (x: std.function = lambda(b...), x : Identifier, b:  # b is generic but it's using in a ... expression so it's a vector of WildCard. x is a WildInteger or maybe just WildCard with stored_type == Integer
#    return quote(unquote(x) : std.function(decltype(lambda(unquote(b)))) = lambda(unquote(b)))  # should unquote auto unpack a vector of Nodes?
#    return quote(unquote(x) : std.function(decltype(lambda(unpack(b)))) = lambda(unpack(b)))  # maybe unpack is clearer or at least easier to implement
#    return quote(unquote(x) : std.function(decltype(lambda(unquote(b...)))) = lambda(unquote(b...)))  # more clever if a bit more confusing and C++y
#)
# ^ although this would preclude a macro that modifies ... expressions? alternative:
#defmacro (x: std.function = lambda(b), x : Identifier, b:  # b is generic but it's fed to 'unpack' so it's a vector of WildCard. x is a WildInteger or maybe just WildCard with stored_type == Integer
#    return quote(unquote(x) : std.function(decltype(lambda(unpack(b)))) = lambda(unpack(b)))
#)
# better:
#defmacro (x: std.function = lambda(b), x: Identifier, b: ...:  # b is a vector of WildCard. x is a WildInteger or maybe just WildCard with stored_type == Integer
#    return quote(unquote(x) : std.function(decltype(lambda(unpack(b)))) = lambda(unpack(b)))  # unpack distinct from unquote is better in case we can't determine at transpile time if b is a vector
#)

# see a macro
# defmacro_node = ...
# compile macro_impl in dll
# MacroDefinition(pattern=defmacro_node.args[0], action=macro_impl)
#
#def matches(x, y) -> :
#    if x == y == nullptr:
#        return true, None
#     if isinstance(y, WildCard):
#        if not y.stored_typeid or y.stored_typeid() == typeid(x)
#            return true, {y : x}
#        else:
#            return false, None
#    if typeid(x) != typeid(y):    # ugly
#        return false, None
#    if y._is_wildcard:  # ugly (especially in combination with typdid)
#        return true # or the match? {y : x}
#    if len(x.args) != len(y.args):
#        return false, None
#    if len(x.args) == 0 and x.func == None:
#        return x.repr() == y.repr(), None  # ugly
#    submatches = {}
#    for i in range(len(x.args)):
#        m = matches(x[i], y[i])
#         if not m:
#           return false, None
#         submatches.extend(m)
#     m = matches(x.func, y.func):
#     if not m:
#        return false, None
#    submatches.extend(m)
#    return true, submatches
#
#
#       
#
# expansion:
# have a node
# for pattern, action in macro_definitions:
#     if match_dict := matches(node, pattern):
#         node = macro_trampoline(action, match_dict)
#         #node = action(match_dict)
#
# def (macro_action1, match_dict:
#    x = match_dict["x"]
#    y = match_dict["y"]
#
#    return ...
# )
#
# def (macro_trampoline, action_ptr, match_dict:
#     return *action_ptr(match_dict)
#)

# this should probably take an index into an already dlsymed table of fptrs
def (macro_trampoline, fptr : uintptr_t, matches: std.map<string, Node>:
    # writing a wrapper type for pybind11 around the correct function pointer would be better (fine for now)
    # note that extra parens required around '+' to specify lambda return type (precedence of ':' vs '+') TODO(?) remove the dubious post-parse hacks for immediatelly invoked lambdas with a return type (just require parens)
    f = reinterpret_cast<decltype(+(lambda(matches:std.map<string, Node>, None): Node))>(fptr)  # no explicit function ptr syntax yet/ever(?)
    return (*f)(matches)
)