#pragma once

#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>

//#include <concepts>
//#include <ranges>
//#include <numeric>


#include "ceto.h"

#include "ast.donotedit.autogenerated.h"
;
#include <typeinfo>
;
#include <ranges>
;
    inline auto macro_matches(const std::shared_ptr<const Node>&  node, const std::shared_ptr<const Node>&  pattern, const std::map<std::string,std::shared_ptr<const Node>>  params) -> std::optional<std::map<std::shared_ptr<const Node>,std::shared_ptr<const Node>>> {
if ((std::dynamic_pointer_cast<const Identifier>(pattern) != nullptr)) {
            const auto search = ceto::mado(params)->find(ceto::mad(ceto::mado(pattern)->name())->value());
if (search == ceto::mado(params)->end()) {
                return {};
            }
            const auto matched_param = (search -> second);
if ((std::dynamic_pointer_cast<const Identifier>(matched_param) != nullptr)) {
                return std::map<std::shared_ptr<const Node>,std::shared_ptr<const Node>>{{pattern, node}};
            } else if (const auto typeop = std::dynamic_pointer_cast<const TypeOp>(matched_param)) {
if ((std::dynamic_pointer_cast<const Identifier>(ceto::mado(typeop)->rhs()) != nullptr)) {
                    const auto node_class_name = class_name((&node) -> get());
if (node_class_name == ceto::mad(ceto::mado(ceto::mado(typeop)->rhs())->name())->value()) {
                        return std::map<std::shared_ptr<const Node>,std::shared_ptr<const Node>>{{pattern, node}};
                    }
                }
            }
        }
if (typeid((*node)) != typeid((*pattern))) {
            return {};
        }
if (ceto::mado(ceto::mado(node)->args)->size() != ceto::mado(ceto::mado(pattern)->args)->size()) {
            return {};
        }
if ((ceto::mado(node)->func == nullptr) != (ceto::mado(pattern)->func == nullptr)) {
            return {};
        }
if (((ceto::mado(ceto::mado(node)->args)->size() == 0) && (ceto::mado(node)->func == nullptr)) && (ceto::mado(pattern)->func == nullptr)) {
if (ceto::mado(node)->repr() == ceto::mado(pattern)->repr()) {
                return std::map<std::shared_ptr<const Node>,std::shared_ptr<const Node>>{};
            }
            return {};
        }
        auto submatches { std::map<std::shared_ptr<const Node>,std::shared_ptr<const Node>>{} } ;
        for(const auto& i : std::ranges::iota_view(0u, ceto::mado(ceto::mado(node)->args)->size())) {
            const auto m = macro_matches(ceto::maybe_bounds_check_access(ceto::mado(node)->args,i), ceto::maybe_bounds_check_access(ceto::mado(pattern)->args,i), params);
if (!m) {
                return {};
            }
            ceto::mado(submatches)->insert(ceto::mado(m)->begin(), ceto::mado(m)->end());
        }
if (ceto::mado(node)->func) {
            const auto m = macro_matches(ceto::mado(node)->func, ceto::mado(pattern)->func, params);
if (!m) {
                return {};
            }
            ceto::mado(submatches)->insert(ceto::mado(m)->begin(), ceto::mado(m)->end());
        }
        return submatches;
    }

