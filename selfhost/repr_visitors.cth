include <pybind11/pybind11.h>

include (visitor)
include (ast)
include (string_utils)

struct (BaseVisitor<class:Derived>(Visitor):
    ### taken from https://github.com/symengine/symengine/blob/master/symengine/visitor.h

    def (visit: virtual:mut, node: Node:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: UnOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: LeftAssociativeUnOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: BinOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: TypeOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: SyntaxTypeOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: AttributeAccess:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: ArrowOp:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Assign:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: ScopeResolution:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: NamedParameter:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Identifier:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Call:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: ArrayAccess:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: BracedCall:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Template:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: StringLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: IntegerLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: FloatLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: ListLike_:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: ListLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: TupleLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: BracedLiteral:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Block:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: Module:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: RedundantParens:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: InfixWrapper_:
        dynamic_cast<Derived:ptr>(this)->visit(node)
    )
)

struct (EvalableAstReprVisitor(BaseVisitor<EvalableAstReprVisitor>):
    # This should really just be a few virtual methods on Node, but we want to keep the visitor infrastructure in place for the future

    repr = ""

    def (visit: virtual:mut, node: Node:
        repr += "node"
    )
#
    def (visit: virtual:mut, node: UnOp:
        self.repr += class_name(node) + "(" +  node.op + ", ["
        node.args[0].accept(*this)
        self.repr += "])"
    )
#
#    def (visit: virtual:mut, node: LeftAssociativeUnOp:
#        self.repr += class_name(node) + "(" +  node.op + ", ["
#        node.args[0].accept(*this)
#        self.repr += "])"
#    )
#
#    def (visit: virtual:mut, node: BinOp:
#        self.repr += class_name(node) + "(" +  node.op + ", ["
#        for (arg in node.args:
#            arg.accept(*this)
#            self.repr += ", "
#        )
#        self.repr += "])"
#    )
)
