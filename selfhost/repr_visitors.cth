include <pybind11/pybind11.h>

include (visitor)
include (ast)
include (string_utils)


struct (BaseVisitor<typename:T>:
    x : T
)

struct (EvalableAstReprVisitor(Visitor):
    # This should really just be a few virtual methods on Node, but we want to keep the visitor infrastructure in place for the future

    repr = ""

    def (visit: virtual:mut, node: Node:
        pass
    )

    def (visit: virtual:mut, node: UnOp:
        self.repr += class_name(node) + "(" +  node.op + ", ["
        node.args[0].accept(*this)
        self.repr += "])"
    )

    def (visit: virtual:mut, node: LeftAssociativeUnOp:
        self.repr += class_name(node) + "(" +  node.op + ", ["
        node.args[0].accept(*this)
        self.repr += "])"
    )

    def (visit: virtual:mut, node: BinOp:
        self.repr += class_name(node) + "(" +  node.op + ", ["
        for (arg in node.args:
            arg.accept(*this)
            self.repr += ", "
        )
        self.repr += "])"
    )

    def (visit: virtual:mut, node: TypeOp:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: SyntaxTypeOp:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: AttributeAccess:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: ArrowOp:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: Assign:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: ScopeResolution:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: NamedParameter:
        self.visit(static_pointer_cast<BinOp.class>(node))
    )

    def (visit: virtual:mut, node: Identifier:
        pass
    )

    def (visit: virtual:mut, node: Call:
        pass
    )

    def (visit: virtual:mut, node: ArrayAccess:
        pass
    )

    def (visit: virtual:mut, node: BracedCall:
        pass
    )

    def (visit: virtual:mut, node: Template:
        pass
    )

    def (visit: virtual:mut, node: StringLiteral:
        pass
    )

    def (visit: virtual:mut, node: IntegerLiteral:
        pass
    )

    def (visit: virtual:mut, node: FloatLiteral:
        pass
    )

    def (visit: virtual:mut, node: ListLike_:
        pass
    )

    def (visit: virtual:mut, node: ListLiteral:
        pass
    )

    def (visit: virtual:mut, node: TupleLiteral:
        pass
    )

    def (visit: virtual:mut, node: BracedLiteral:
        pass
    )

    def (visit: virtual:mut, node: Block:
        pass
    )

    def (visit: virtual:mut, node: Module:
        pass
    )

    def (visit: virtual:mut, node: RedundantParens:
        pass
    )

    def (visit: virtual:mut, node: InfixWrapper_:
        pass
    )
)
