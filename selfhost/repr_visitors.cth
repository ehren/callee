include (visitor)
include (ast)


struct (EvalableAstReprVisitor(BaseVisitor<EvalableAstReprVisitor>):
    repr = ""s

    def (generate_loc: mut, node:
        # preserve source location but don't worry about the source string for now
        loc = std.get<1>(node.source)
        self.repr += '("", ' + std.to_string(loc) + ")"
    )

    def (visit: override:mut, node: Node.class:
        self.repr += class_name(&node) + "("

        if (node.func:
            node.func.accept(*this)
            self.repr += ", "
        )

        self.repr += "["
        if (node.args.size() > 0:
            for (arg in node.args:
                arg.accept(*this)
                self.repr += ", "
            )
        )
        self.repr += "], "

        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: UnOp.class:
        self.repr += class_name(&node) + '("' +  node.op + '", ['
        node.args[0].accept(*this)
        self.repr += "], "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: LeftAssociativeUnOp.class:
        self.repr += class_name(&node) + '("' +  node.op + '", ['
        node.args[0].accept(*this)
        self.repr += "], "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: BinOp.class:
        self.repr += class_name(&node) + '("' +  node.op + '", ['
        for (arg in node.args:
            arg.accept(*this)
            self.repr += ", "
        )
        self.repr += "], "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: Identifier.class:
        self.repr += class_name(&node) + '("' +  node.repr() + '"'
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: StringLiteral.class:
        self.repr += class_name(&node) + "(" +  node.escaped() + ", "

        if (node.prefix:
            node.prefix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "

        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: IntegerLiteral.class:
        self.repr += class_name(&node) + '("' + node.integer_string + '", '
        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )

    def (visit: override:mut, node: FloatLiteral.class:
        self.repr += class_name(&node) + '("' + node.float_string + '", '
        if (node.suffix:
            node.suffix.accept(*this)
        else:
            self.repr += "None"
        )
        self.repr += ", "
        self.generate_loc(node)
        self.repr += ")"
    )
)
