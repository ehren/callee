include <pybind11/pybind11.h>

include (visitor)
include (ast)
include (string_utils)

struct (BaseVisitor<class:Derived>(Visitor):
    ### taken from https://github.com/symengine/symengine/blob/master/symengine/visitor.h

    def (visit: virtual:mut, node: const:Node.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:UnOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:LeftAssociativeUnOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:BinOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:TypeOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:SyntaxTypeOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:AttributeAccess.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:ArrowOp.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Assign.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:ScopeResolution.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:NamedParameter.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Identifier.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Call.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:ArrayAccess.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:BracedCall.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Template.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:StringLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:IntegerLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:FloatLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:ListLike_.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:ListLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:TupleLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:BracedLiteral.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Block.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:Module.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:RedundantParens.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )

    def (visit: virtual:mut, node: const:InfixWrapper_.class:ref:
        static_cast<Derived:ptr>(this)->visit(node)
    )
)

struct (EvalableAstReprVisitor(BaseVisitor<EvalableAstReprVisitor>):
    # This should really just be a few virtual methods on Node, but we want to keep the visitor infrastructure in place for the future

    repr = ""

    def (visit: virtual:mut, node: const:Node.class:ref:
        self.repr += class_name(&node) + "("

        if (node.func:
            node.func.accept(*this)
            self.repr += ", "
        )

        if (node.args.size() > 0:
            self.repr += "["

            for (arg in node.args:
                arg.accept(*this)
                self.repr += ", "
            )

            self.repr += "]"
        )

        self.repr += ")"
    )

    def (visit: virtual:mut, node: const:UnOp.class:ref:
        self.repr += class_name(&node) + "(" +  node.op + ", ["
        node.args[0].accept(*this)
        self.repr += "])"
    )
#
    def (visit: virtual:mut, node: const:LeftAssociativeUnOp.class:ref:
        self.repr += class_name(&node) + "(" +  node.op + ", ["
        node.args[0].accept(*this)
        self.repr += "])"
    )

    def (visit: virtual:mut, node: const:BinOp.class:ref:
        self.repr += class_name(&node) + "(" +  node.op + ", ["
        for (arg in node.args:
            arg.accept(*this)
            self.repr += ", "
        )
        self.repr += "])"
    )
)
