#pragma once

#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>

//#include <concepts>
//#include <ranges>
//#include <numeric>


#include "ceto.h"

#include <pybind11/pybind11.h>
;
#include "visitor.donotedit.autogenerated.h"
;
#include "ast.donotedit.autogenerated.h"
;
#include "string_utils.donotedit.autogenerated.h"
;
struct EvalableAstReprVisitor : public Visitor {

using Visitor::Visitor;

    std::remove_cvref_t<decltype(std::string {""})> repr = std::string {""};

         virtual inline auto visit(const std::shared_ptr<const Node>&  node) -> void {
            const py::object selph = py::cast((&node) -> get()); static_assert(ceto::is_non_aggregate_init_and_if_convertible_then_non_narrowing_v<decltype(py::cast((&node) -> get())), std::remove_cvref_t<decltype(selph)>>);
            const auto classname = std::string(py::str(ceto::mado(ceto::mado(selph)->attr("__class__"))->attr("__name__")));
            (this -> repr) += (classname + std::string {"("});
if (ceto::mado(node)->func) {
                ceto::mado(ceto::mado(node)->func)->accept((*this));
            }
            (this -> repr) += std::string {")(["};
            for(const auto& arg : ceto::mado(node)->args) {
                ceto::mado(arg)->accept((*this));
                (this -> repr) += std::string {", "};
            }
            (this -> repr) += std::string {"])"};
        }

         virtual inline auto visit(const std::shared_ptr<const UnOp>&  node) -> void {
            (this -> repr) += ((std::string {"("} + ceto::mado(node)->op) + std::string {" "});
            ceto::mado(ceto::maybe_bounds_check_access(ceto::mado(node)->args,0))->accept((*this));
            (this -> repr) += std::string {")"};
        }

         virtual inline auto visit(const std::shared_ptr<const LeftAssociativeUnOp>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const BinOp>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const TypeOp>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const SyntaxTypeOp>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const AttributeAccess>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const ArrowOp>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Assign>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const ScopeResolution>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const NamedParameter>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Identifier>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Call>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const ArrayAccess>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const BracedCall>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Template>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const StringLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const IntegerLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const FloatLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const ListLike_>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const ListLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const TupleLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const BracedLiteral>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Block>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const Module>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const RedundantParens>&  node) -> void {
            ; // pass
        }

         virtual inline auto visit(const std::shared_ptr<const InfixWrapper_>&  node) -> void {
            ; // pass
        }

};

