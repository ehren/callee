#pragma once

#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>

//#include <concepts>
//#include <ranges>
//#include <numeric>


#include "ceto.h"

#include <pybind11/pybind11.h>
;
#include "visitor.donotedit.autogenerated.h"
;
#include "ast.donotedit.autogenerated.h"
;
#include "string_utils.donotedit.autogenerated.h"
;
template <class Derived>struct BaseVisitor : public Visitor {

using Visitor::Visitor;

         virtual inline auto visit(const std::shared_ptr<const Node>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const UnOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const LeftAssociativeUnOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const BinOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const TypeOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const SyntaxTypeOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const AttributeAccess>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const ArrowOp>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Assign>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const ScopeResolution>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const NamedParameter>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Identifier>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Call>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const ArrayAccess>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const BracedCall>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Template>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const StringLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const IntegerLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const FloatLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const ListLike_>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const ListLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const TupleLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const BracedLiteral>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Block>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const Module>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const RedundantParens>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit(const std::shared_ptr<const InfixWrapper_>&  node) -> void {
            dynamic_cast<Derived *>(this) -> visit(node);
        }

};

struct EvalableAstReprVisitor : public BaseVisitor<EvalableAstReprVisitor> {

    std::remove_cvref_t<decltype(std::string {""})> repr = std::string {""};

         virtual inline auto visit(const std::shared_ptr<const Node>&  node) -> void {
            repr += std::string {"node"};
        }

         virtual inline auto visit(const std::shared_ptr<const UnOp>&  node) -> void {
            (this -> repr) += (((class_name(node) + std::string {"("}) + ceto::mado(node)->op) + std::string {", ["});
            ceto::mado(ceto::maybe_bounds_check_access(ceto::mado(node)->args,0))->accept((*this));
            (this -> repr) += std::string {"])"};
        }

};

