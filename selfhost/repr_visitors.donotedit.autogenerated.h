#pragma once

#include <string>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <cassert>
#include <compare> // for <=>
#include <thread>
#include <optional>

//#include <concepts>
//#include <ranges>
//#include <numeric>


#include "ceto.h"

#include <pybind11/pybind11.h>
;
#include "visitor.donotedit.autogenerated.h"
;
#include "ast.donotedit.autogenerated.h"
;
#include "string_utils.donotedit.autogenerated.h"
;
template <class Derived>struct BaseVisitor : public Visitor {

using Visitor::Visitor;

         virtual inline auto visit( const Node &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const UnOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const LeftAssociativeUnOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const BinOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const TypeOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const SyntaxTypeOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const AttributeAccess &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const ArrowOp &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Assign &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const ScopeResolution &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const NamedParameter &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Identifier &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Call &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const ArrayAccess &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const BracedCall &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Template &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const StringLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const IntegerLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const FloatLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const ListLike_ &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const ListLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const TupleLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const BracedLiteral &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Block &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const Module &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const RedundantParens &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

         virtual inline auto visit( const InfixWrapper_ &  node) -> void {
            static_cast<Derived *>(this) -> visit(node);
        }

};

struct EvalableAstReprVisitor : public BaseVisitor<EvalableAstReprVisitor> {

    std::remove_cvref_t<decltype(std::string {""})> repr = std::string {""};

         virtual inline auto visit( const Node &  node) -> void {
            (this -> repr) += (class_name((&node)) + std::string {"("});
if (ceto::mado(node)->func) {
                ceto::mado(ceto::mado(node)->func)->accept((*this));
                (this -> repr) += std::string {", "};
            }
if (ceto::mado(ceto::mado(node)->args)->size() > 0) {
                (this -> repr) += std::string {"["};
                for(const auto& arg : ceto::mado(node)->args) {
                    ceto::mado(arg)->accept((*this));
                    (this -> repr) += std::string {", "};
                }
                (this -> repr) += std::string {"]"};
            }
            (this -> repr) += std::string {")"};
        }

         virtual inline auto visit( const UnOp &  node) -> void {
            (this -> repr) += (((class_name((&node)) + std::string {"("}) + ceto::mado(node)->op) + std::string {", ["});
            ceto::mado(ceto::maybe_bounds_check_access(ceto::mado(node)->args,0))->accept((*this));
            (this -> repr) += std::string {"])"};
        }

         virtual inline auto visit( const LeftAssociativeUnOp &  node) -> void {
            (this -> repr) += (((class_name((&node)) + std::string {"("}) + ceto::mado(node)->op) + std::string {", ["});
            ceto::mado(ceto::maybe_bounds_check_access(ceto::mado(node)->args,0))->accept((*this));
            (this -> repr) += std::string {"])"};
        }

         virtual inline auto visit( const BinOp &  node) -> void {
            (this -> repr) += (((class_name((&node)) + std::string {"("}) + ceto::mado(node)->op) + std::string {", ["});
            for(const auto& arg : ceto::mado(node)->args) {
                ceto::mado(arg)->accept((*this));
                (this -> repr) += std::string {", "};
            }
            (this -> repr) += std::string {"])"};
        }

};

