include <map>

include (ast)
include (utility)

class (ClassDefinition:
    name_node : Identifier
    class_def_node : Call
    is_unique: bool
    is_struct: bool
    is_forward_declaration: bool

    is_pure_virtual = false
    is_concrete = false
#    is_generic_param_index = std.map<int, bool>()
#
#    def (has_generic_params:
#        for ((k, v) in self.is_generic_param_index:
#            if (v:
#                return true
#            )
#        )
#
#        return false
#    )

    def (repr:
        return self.class_name() + "(" + self.name_node.repr() + ", " + self.class_def_node.repr() + std.to_string(self.is_unique) + ", " + std.to_string(self.is_struct) + ", " + std.to_string(self.is_forward_declaration) + ")"
    )

    def (class_name: virtual:
        return "ClassDefinition"
    ) : std.string
)

class (InterfaceDefinition(ClassDefinition):
    def (init:
        super.init(None, None, false, false, false)
    )

    def (class_name: override:
        return "InterfaceDefinition"
    ) : std.string
)

class (VariableDefinition:
    defined_node: Identifier
    defining_node: Node

    def (repr:
        return self.class_name() + "(" + self.defined_node.repr() + ", " + self.defining_node.repr() + ")"
    )

    def (class_name: virtual:
        return "VariableDefinition"
    ) : std.string
)

class (LocalVariableDefinition(VariableDefinition):
    def (class_name: override:
        return "LocalVariableDefinition"
    ) : std.string
)

class (GlobalVariableDefinition(VariableDefinition):
    def (class_name: override:
        return "GlobalVariableDefinition"
    ) : std.string
)

class (FieldDefinition(VariableDefinition):
    def (class_name: override:
        return "FieldDefinition"
    ) : std.string
)

class (ParameterDefinition(VariableDefinition):
    def (class_name: override:
        return "ParameterDefinition"
    ) : std.string
)

def (creates_new_variable_scope, e: Node:
    if (isinstance(e, Call):
        name = e.func.name()
        return name and contains(["def", "lambda", "class", "struct"], name.value())
    )
    return false
)


def (comes_before, root, before, after:
    if (root == before:
        return true
    elif root == after:
        return false
    )
    for (arg in root.args:
        cb = comes_before(arg, before, after)
        if (cb.has_value():
            return cb
        )
    )
    if (root.func:
        cb = comes_before(root.func, before, after)
        if (cb.has_value():
            return cb
        )
    )
    return {}
) : std.optional<bool>


class (Scope:
    interfaces = std.map<std.string, std.vector<Node>>()
    class_definitions: [ClassDefinition] = []
    variable_definitions: [VariableDefinition] = []
    indent = 0
    _parent: weak:Scope = {}
    in_function_body = false
    in_function_param_list = false  # TODO unused remove
    in_class_body = false
    in_decltype = false

    def (indent_str:
        return std.string(4*self.indent, char' ')
    )

    def (add_variable_definition: mut, defined_node: Identifier, defining_node: Node:
        parent: mut = defined_node.parent()

        while (parent:
            if (creates_new_variable_scope(parent):
                name = parent.func.name()
                if (name == "class" or name == "struct":
                    defn = FieldDefinition(defined_node, defining_node)
                    self.variable_definitions.push_back(defn)
                elif name == "def" or name == "lambda":
                    defn = ParameterDefinition(defined_node, defining_node)
                    self.variable_definitions.push_back(defn)
                else:
                    defn = LocalVariableDefinition(defined_node, defining_node)
                    self.variable_definitions.push_back(defn)
                )
                return
            )
            parent = parent.parent()
        )
        defn = GlobalVariableDefinition(defined_node, defining_node)
        self.variable_definitions.push_back(defn)
    )

    def (add_interface_method: mut, interface_name: std.string, interface_method_def_node: Node:
        self.interfaces[interface_name].push_back(interface_method_def_node)
    )

    def (add_class_definition: mut, class_definition: ClassDefinition:
        self.class_definitions.push_back(class_definition)
    )

    def (lookup_class, class_node: Node:
        if (not isinstance(class_node, Identifier):
            return None
        )
        for (c in self.class_definitions:
            if (c.name_node.name() == class_node.name():
                return c
            )
        )
        if (self.interfaces.contains(class_node.name().value()):
            return InterfaceDefinition()
        )
        if ((s = self._parent.lock()):
            return s.lookup_class(class_node)
        )
        return None
    ) : ClassDefinition

    def (find_defs, var_node: Node, find_all=true:

        if (not isinstance(var_node, Identifier):
            return {}
        )

        results: mut = []

        for (d in self.variable_definitions:
            if (d.defined_node.name() == var_node.name() and d.defined_node != var_node:
                defined_loc = std.get<1>(d.defined_node.source)
                var_loc = std.get<1>(var_node.source)

                # we should just compute a 'node_loc' in a previous pass
                parent_block: mut = d.defined_node.parent()
                while (true:
                    if (isinstance(parent_block, Module):
                        break
                    )
                    parent_block = parent_block.parent()
                )

                defined_before = comes_before(parent_block, d.defined_node, var_node)

#                if (defined_loc < var_loc:
                if (defined_before and defined_before.value():
                    if (not find_all:
                        return [d]
                    )
                    results.append(d)
                    if ((assign = asinstance(d.defining_node, Assign)):
                        if ((ident = asinstance(assign.rhs(), Identifier)):
                            more = self.find_defs(ident, find_all)
                            results.insert(results.end(), more.begin(), more.end())
                        )
                    )
                )
            )
        )

        if ((s = self._parent.lock()):
            more = s.find_defs(var_node, find_all)
            results.insert(results.end(), more.begin(), more.end())
        )

        return results
    ) : [VariableDefinition]

    def (find_def, var_node: Node:
        find_all = false
        found = self.find_defs(var_node, find_all)
        return if (found.size() > 0:
            found[0]
        else:
            none_result : VariableDefinition = None
            none_result  # needed for lambda return type deduction; arguably expression-if usage here is silly.
        )
    )

    def (enter_scope:
        s: mut = Scope()
        s._parent = self
        s.in_function_body = self.in_function_body
        s.in_decltype = self.in_decltype
        s.indent = self.indent + 1
        return s
    ) : Scope

    def (parent:
        return self._parent.lock()
    )
)
